********** Scope **********

- Javascript의 변수관리는 블록범위가 아닌 함수 단위로 유효범위가 설정.

- 변수명을 중복하여 사용 가능하며 변수를 사용하는 곳에서 가장 가까운 변수를 참조.

- 변수생성 키워드(var)가 없는 경우에는 전역 변수로 설정.

- 실행시 변수 검색은 렉시컬 영역 기준으로 한다.
 : 렉시컬 영역 - 함수가 선언된 위치에따라 정의되는 영역.

 - 새로운 함수가 선언되면 새로운 변수 범위가 설정된다.

 - 가급적 전역변수 선언은 피하는게 좋다.


 ********** Execution Contexts ***********

- 실행 컨텍스트 : 함수가 실행될때 컨텍스트가 생성됨.
 :컨텍스트 생성 시 컨텍스트 안에 변수객체(arguments, variable), scope chain, this가 생성됩니다.

- 스코프내 변수 및 함수 ( Local, Global ), 호출 근원

- 콜스텍에 담긴 한줄 한줄이 실행 컨텍스트이다.

//호이스팅 : 변수를 선언하고 초기화했을 때 선언 부분이 최상단으로 끌어올려지는 현상(초기화 또는 대입부분은 그대로 남아 있다.)
- 선언식을 가장 위로 끌어 올린다.
- 선언과 동시에 할당이 되어있으면 선언식만 가장 위로 올라간다 (변수)
- 자바스크립트 컴파일러는 두번 동작한다.
	: var a = 2 경우 ---->  1. var a;  2. a = 2;


//익명함수를 곧바로 실행시켜 함수 내부의 변수나 메서드를 private로 설정하는 효과
: return 영역은 public



******* this ********
- Call Site : 함수가 호출된 지점을 의미, javascript에서는 함수가 호출되는 지점에서의 포함된 객체르 찾아 
해당 객체와 this 를 바인딩한다.


- 5 가지의 패턴
* 글로벌 레퍼런스 or 일반적인 함수 호출시 this 는 전역(window)를 가리킨다.
: 내부함수에서도 마찬가지. 함수 실행시엔 무조건 this 는 전역을 가리킨다.

* 메소드 호출시 this는 부모 객체를 가리킨다.

- 함수가 실행되는동안 이용할 수 있다.

* 생성자에 의한 호출에서 this 는 새로 생성된 객체를 가리킨다.

* call apply 경우 첫번째 this 는 첫번째 아규먼트


함수가 어떻게 불리는지에 따라 결정된다.


******* call & apply & bind *******

함수 메서드 : MDN 참조

//apply : argument array , call : array 아닐때,

bind : 함수를 리턴한다. ( 함수를 실행시키는 것은 아님 )

 	 : 특정아규먼트를 고정시키는 역할을 하기도 한다.


